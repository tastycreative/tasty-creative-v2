generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                        @id @default(cuid())
  email                      String                        @unique
  emailVerified              DateTime?
  name                       String?
  image                      String?
  role                       Role                          @default(GUEST)
  createdAt                  DateTime                      @default(now())
  updatedAt                  DateTime                      @updatedAt
  password                   String?
  lastAccessedAt             DateTime?                     @default(now())
  username                   String?                       @unique
  accounts                   Account[]
  assignedBoardColumnsByUser BoardColumnMemberAssignment[] @relation("BoardColumnAssignedBy")
  assignedBoardColumns       BoardColumnMemberAssignment[] @relation("BoardColumnAssignedUser")
  chatbotConversations       ChatbotConversation[]
  ContentSubmission          ContentSubmission[]
  forumComments              ForumComment[]
  forumVotes                 ForumVote[]
  ModerationLog              ModerationLog[]
  ModularWorkflow            ModularWorkflow[]             @relation("ModularWorkflowCreator")
  notifications              Notification[]
  pageViews                  PageView[]
  createdPodTeams            PodTeam[]                     @relation("PodTeamCreator")
  podClientAssignments       PodTeamClientAssignment[]     @relation("PodClientAssignedBy")
  podTeamMemberships         PodTeamMember[]               @relation("PodTeamMemberUser")
  Post                       Post[]
  PostReaction               PostReaction[]
  sessions                   Session[]
  createdTasks               Task[]                        @relation("TaskCreator")
  taskActivities             TaskActivityHistory[]         @relation("TaskActivityUser")
  taskComments               TaskComment[]                 @relation("TaskCommentUser")
  Thread                     Thread[]
  ThreadWatcher              ThreadWatcher[]
  performedUserActivities    UserActivityHistory[]         @relation("UserActivityActor")
  receivedUserActivities     UserActivityHistory[]         @relation("UserActivityTarget")
  verificationTokens         VerificationToken[]
  voiceNoteHistory           VoiceNoteHistory[]
  voiceNoteSales             VoiceNoteSale[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model HubstaffConfig {
  id           String    @id @default(cuid())
  refreshToken String
  accessToken  String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([id])
}

model PageView {
  id              String   @id @default(cuid())
  sessionId       String
  userId          String?
  ipHash          String
  userAgent       String?
  path            String
  referrer        String?
  timestamp       DateTime @default(now())
  sessionDuration Int?
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
  @@index([path])
}

model Analytics {
  id                 String   @id @default(cuid())
  date               DateTime @unique
  uniqueVisitors     Int      @default(0)
  totalPageViews     Int      @default(0)
  authenticatedViews Int      @default(0)
  anonymousViews     Int      @default(0)
  createdAt          DateTime @default(now())

  @@index([date])
}

model VoiceGenAccount {
  id          String      @id @default(cuid())
  clientName  String
  email       String?
  password    String?
  voiceStatus VoiceStatus @default(NA)
  accountType AccountType @default(ELEVENLABS)
  dataFolder  String?
  feedback    String?
  rating      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([clientName])
  @@index([voiceStatus])
  @@index([accountType])
}

model VoiceModel {
  id          String             @id @default(cuid())
  accountKey  String             @unique
  accountName String
  voiceName   String
  voiceId     String             @unique
  apiKey      String
  description String?            @default("Backup account for high-volume usage")
  category    VoiceModelCategory @default(PROFESSIONAL)
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([accountKey])
  @@index([voiceId])
  @@index([category])
  @@index([isActive])
  @@index([createdAt])
}

model VoiceNoteHistory {
  id                  String         @id @default(cuid())
  userId              String
  elevenLabsHistoryId String
  voiceId             String
  voiceName           String
  accountKey          String
  text                String
  generatedAt         DateTime
  createdAt           DateTime       @default(now())
  charactersUsed      Int?
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  voiceNoteSale       VoiceNoteSale?

  @@unique([userId, elevenLabsHistoryId])
  @@index([userId])
  @@index([elevenLabsHistoryId])
  @@index([voiceId])
  @@index([accountKey])
  @@index([generatedAt])
  @@index([createdAt])
}

model VoiceNoteSale {
  id                 String            @id @default(cuid())
  userId             String
  userName           String
  userEmail          String
  modelName          String
  voiceNote          String
  saleAmount         Float
  soldDate           DateTime
  status             String            @default("Completed")
  generatedDate      DateTime?
  source             String?           @default("Manual")
  voiceNoteHistoryId String?           @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  voiceNoteHistory   VoiceNoteHistory? @relation(fields: [voiceNoteHistoryId], references: [id])

  @@index([userId])
  @@index([modelName])
  @@index([soldDate])
  @@index([status])
  @@index([createdAt])
  @@index([saleAmount])
}

model Task {
  id                  String                @id @default(cuid())
  title               String
  description         String?
  priority            TaskPriority          @default(MEDIUM)
  dueDate             DateTime?
  assignedTo          String?
  createdById         String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  updatedBy           String?
  attachments         Json?
  assignedToTeam      Boolean               @default(false)
  contentSubmissionId String?               @unique
  status              String                @default("NOT_STARTED")
  podTeamId           String?
  taskNumber          Int                   @default(autoincrement())
  ModularWorkflow     ModularWorkflow?      @relation("ModularWorkflowTask")
  notifications       Notification[]
  ContentSubmission   ContentSubmission?    @relation(fields: [contentSubmissionId], references: [id])
  createdBy           User                  @relation("TaskCreator", fields: [createdById], references: [id])
  podTeam             PodTeam?              @relation(fields: [podTeamId], references: [id])
  activityHistory     TaskActivityHistory[]
  comments            TaskComment[]

  @@index([podTeamId])
  @@index([createdById])
  @@index([status])
  @@index([assignedToTeam])
  @@index([contentSubmissionId])
  @@index([taskNumber])
}

model TaskActivityHistory {
  id          String           @id @default(cuid())
  taskId      String
  userId      String
  actionType  TaskActivityType
  fieldName   String?
  oldValue    String?
  newValue    String?
  description String?
  createdAt   DateTime         @default(now())
  task        Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User             @relation("TaskActivityUser", fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
  @@index([actionType])
}

model TaskComment {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  attachments Json?
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation("TaskCommentUser", fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
}

model ClientModel {
  id                    String                    @id @default(cuid())
  clientName            String                    @unique
  status                String
  percentTaken          String?
  guaranteed            String?
  launchDate            String?
  referrer              String?
  name                  String?
  profilePicture        String?
  personalityType       String?
  commonTerms           String?
  commonEmojis          String?
  restrictedTermsEmojis String?
  notes                 String?
  generalNotes          String?
  mainInstagram         String?
  mainTwitter           String?
  mainTiktok            String?
  profileLink           String?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  row_id                String?
  sheetLinks            ClientModelSheetLinks[]
  contentDetails        ContentDetails?
  notifications         Notification[]
  podTeamAssignments    PodTeamClientAssignment[]

  @@index([clientName])
  @@index([status])
}

model ClientModelSheetLinks {
  id            String      @id @default(cuid())
  clientModelId String
  sheetUrl      String
  sheetName     String?
  sheetType     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  clientModel   ClientModel @relation(fields: [clientModelId], references: [id], onDelete: Cascade)

  @@index([clientModelId])
  @@index([sheetType])
}

model ContentDetails {
  id                         String      @id @default(cuid())
  twitterNudity              String?
  openToLivestreams          String?
  onlyFansWallLimitations    String?
  flyerCensorshipLimitations String?
  boobContent                String?
  pussyContent               String?
  soloSquirtContent          String?
  soloFingerContent          String?
  soloDildoContent           String?
  soloVibratorContent        String?
  joiContent                 String?
  bgContent                  String?
  bjHandjobContent           String?
  bggContent                 String?
  bbgContent                 String?
  orgyContent                String?
  ggContent                  String?
  analContent                String?
  livestreamContent          String?
  customVideoPricing         String?
  customCallPricing          String?
  bundleContent5_10          String?
  bundleContent10_15         String?
  bundleContent15_20         String?
  bundleContent20_25         String?
  bundleContent25_30         String?
  bundleContent30Plus        String?
  contentOptionsForGames     String?
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  clientModelName            String      @unique
  clientModel                ClientModel @relation(fields: [clientModelName], references: [clientName], onDelete: Cascade)
}

model ClientModelDetails {
  id                    String               @id @default(cuid())
  full_name             String?
  age                   String?
  birthday              String?
  height                String?
  weight                String?
  clothing_size         String?
  ethnicity             String?
  birthplace            String?
  current_city          String?
  timezone              String?
  background            String?
  favorite_colors       String?
  interests             String?
  personality           String?
  amazon_wishlist       String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  clothing_items        String?
  content_offered       String?
  custom_min_price      String?
  favorite_emojis       String?
  keywords              String?
  limitations           String?
  oftv_channel_interest String?
  tone_language         String?
  video_call_min_price  String?
  client_name           String?
  mm_restrictions       String?
  verbiage_restrictions String?
  wall_restrictions     String?
  calendar_id           String?
  onboardingCompleted   Boolean?             @default(false)
  status                String?
  model_name            String?
  clientCustomSheet     String?
  clientOnlyFansAlbum   String?
  clientSocialAlbums    String?
  launchesPod           String?
  onboardingProgress    OnboardingProgress[]
}

model OnboardingList {
  id          String               @id @default(cuid())
  stepNumber  Int
  title       String
  description String?
  required    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  progress    OnboardingProgress[]

  @@index([stepNumber])
}

model OnboardingProgress {
  id                   String             @id @default(cuid())
  onboardingListId     String
  clientModelDetailsId String
  completed            Boolean            @default(false)
  completedAt          DateTime?
  notes                String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  ClientModelDetails   ClientModelDetails @relation(fields: [clientModelDetailsId], references: [id], onDelete: Cascade)
  OnboardingList       OnboardingList     @relation(fields: [onboardingListId], references: [id], onDelete: Cascade)

  @@unique([onboardingListId, clientModelDetailsId])
  @@index([clientModelDetailsId])
  @@index([onboardingListId])
}

model PodTeam {
  id              String                    @id @default(cuid())
  createdAt       DateTime                  @default(now())
  createdById     String?
  description     String?
  isActive        Boolean?                  @default(true)
  name            String                    @unique
  updatedAt       DateTime?                 @updatedAt
  projectPrefix   String?                   @unique
  notifications   Notification[]
  createdBy       User?                     @relation("PodTeamCreator", fields: [createdById], references: [id])
  assignedClients PodTeamClientAssignment[]
  members         PodTeamMember[]
  tasks           Task[]

  @@index([createdById])
  @@index([isActive])
  @@index([name])
  @@index([projectPrefix])
}

model PodTeamMember {
  id        String        @id @default(cuid())
  podTeamId String
  userId    String
  role      PodMemberRole @default(MEMBER)
  joinedAt  DateTime      @default(now())
  podTeam   PodTeam       @relation(fields: [podTeamId], references: [id], onDelete: Cascade)
  user      User          @relation("PodTeamMemberUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([podTeamId, userId])
  @@index([podTeamId])
  @@index([userId])
}

model PodTeamClientAssignment {
  id            String      @id @default(cuid())
  podTeamId     String
  clientModelId String
  assignedAt    DateTime    @default(now())
  assignedById  String
  isActive      Boolean     @default(true)
  notes         String?
  assignedBy    User        @relation("PodClientAssignedBy", fields: [assignedById], references: [id])
  clientModel   ClientModel @relation(fields: [clientModelId], references: [id], onDelete: Cascade)
  podTeam       PodTeam     @relation(fields: [podTeamId], references: [id], onDelete: Cascade)

  @@unique([podTeamId, clientModelId])
  @@index([podTeamId])
  @@index([clientModelId])
  @@index([assignedById])
}

model BoardColumn {
  id              String                        @id
  teamId          String
  label           String
  status          String
  position        Int
  color           String                        @default("#6B7280")
  isDefault       Boolean                       @default(false)
  isActive        Boolean                       @default(true)
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  assignedMembers BoardColumnMemberAssignment[]

  @@unique([teamId, position])
  @@unique([teamId, status])
  @@index([position])
  @@index([teamId])
}

model BoardColumnMemberAssignment {
  id           String      @id @default(cuid())
  columnId     String
  userId       String
  assignedAt   DateTime    @default(now())
  assignedById String
  isActive     Boolean     @default(true)
  assignedBy   User        @relation("BoardColumnAssignedBy", fields: [assignedById], references: [id])
  column       BoardColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user         User        @relation("BoardColumnAssignedUser", fields: [userId], references: [id])

  @@unique([columnId, userId])
  @@index([columnId])
  @@index([userId])
  @@index([assignedById])
}

model ContentSubmission {
  id                    String             @id
  submissionType        SubmissionType
  modelName             String
  priority              SubmissionPriority
  driveLink             String
  contentDescription    String
  screenshotAttachments Json?
  status                SubmissionStatus   @default(PENDING)
  createdById           String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  processedAt           DateTime?
  notes                 String?
  minimumPrice          String?
  releaseDate           String?
  releaseTime           String?
  timezone              String?
  User                  User               @relation(fields: [createdById], references: [id])
  notifications         Notification[]
  Task                  Task?

  @@index([createdAt])
  @@index([createdById])
  @@index([modelName])
  @@index([priority])
  @@index([status])
  @@index([submissionType])
}

model ModularWorkflow {
  id                 String             @id @default(cuid())
  submissionType     SubmissionType
  contentStyle       ContentStyle
  selectedComponents Json
  componentData      Json?
  workflowTemplate   String?
  modelName          String
  priority           SubmissionPriority
  driveLink          String
  contentDescription String
  attachments        Json?
  estimatedDuration  Int?
  teamAssignments    Json?
  createdById        String
  teamId             String?
  taskId             String?            @unique
  status             WorkflowStatus     @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  processedAt        DateTime?
  timezone           String?
  createdBy          User               @relation("ModularWorkflowCreator", fields: [createdById], references: [id])
  task               Task?              @relation("ModularWorkflowTask", fields: [taskId], references: [id])
  notifications      Notification[]

  @@index([createdAt])
  @@index([createdById])
  @@index([modelName])
  @@index([priority])
  @@index([status])
  @@index([submissionType])
  @@index([contentStyle])
  @@index([teamId])
}

model Attachment {
  id       String         @id
  postId   String
  url      String
  filename String
  type     AttachmentType
  size     Int
  Post     Post           @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model ForumCategory {
  id        String           @id
  modelId   String
  key       ForumCategoryKey @default(GENERAL)
  name      String
  createdAt DateTime         @default(now())
  updatedAt DateTime
  Thread    Thread[]

  @@unique([modelId, key])
  @@index([modelId])
}

model ModerationLog {
  id         String           @id
  actorId    String
  targetType ModerationTarget
  targetId   String
  action     ModerationAction
  reason     String?
  createdAt  DateTime         @default(now())
  User       User             @relation(fields: [actorId], references: [id])

  @@index([actorId])
  @@index([createdAt])
  @@index([targetType, targetId])
}

model Post {
  id            String         @id
  threadId      String
  authorId      String
  content_md    String
  content_html  String
  parentPostId  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  editedAt      DateTime?
  Attachment    Attachment[]
  forumComments ForumComment[]
  forumVotes    ForumVote[]
  User          User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Post          Post?          @relation("PostToPost", fields: [parentPostId], references: [id])
  other_Post    Post[]         @relation("PostToPost")
  Thread        Thread         @relation(fields: [threadId], references: [id], onDelete: Cascade)
  PostReaction  PostReaction[]

  @@index([authorId])
  @@index([createdAt])
  @@index([parentPostId])
  @@index([threadId])
}

model PostReaction {
  id     String @id
  postId String
  userId String
  emoji  String
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId, emoji])
  @@index([postId])
  @@index([userId])
}

model Thread {
  id              String           @id
  modelId         String
  categoryId      String
  title           String
  authorId        String
  pinned          Boolean          @default(false)
  locked          Boolean          @default(false)
  solved          Boolean          @default(false)
  views           Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime
  forumThreadTags ForumThreadTag[]
  Post            Post[]
  User            User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ForumCategory   ForumCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  ThreadWatcher   ThreadWatcher[]

  @@index([authorId])
  @@index([createdAt])
  @@index([modelId, categoryId])
  @@index([pinned])
  @@index([updatedAt])
}

model ThreadWatcher {
  id       String @id
  userId   String
  threadId String
  Thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, threadId])
  @@index([threadId])
  @@index([userId])
}

model Notification {
  id                  String             @id @default(cuid())
  userId              String
  type                NotificationType
  title               String
  message             String
  isRead              Boolean            @default(false)
  createdAt           DateTime           @default(now())
  readAt              DateTime?
  data                Json?
  taskId              String?
  podTeamId           String?
  contentSubmissionId String?
  clientModelId       String?
  modularWorkflowId   String?
  clientModel         ClientModel?       @relation(fields: [clientModelId], references: [id], onDelete: Cascade)
  contentSubmission   ContentSubmission? @relation(fields: [contentSubmissionId], references: [id], onDelete: Cascade)
  ModularWorkflow     ModularWorkflow?   @relation(fields: [modularWorkflowId], references: [id], onDelete: Cascade)
  podTeam             PodTeam?           @relation(fields: [podTeamId], references: [id], onDelete: Cascade)
  task                Task?              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@index([taskId])
  @@index([podTeamId])
  @@index([contentSubmissionId])
  @@index([clientModelId])
  @@index([modularWorkflowId])
}

model ForumComment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
}

model ForumVote {
  id        String        @id @default(cuid())
  postId    String
  userId    String
  voteType  ForumVoteType
  createdAt DateTime      @default(now())
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model ForumTag {
  id        String           @id @default(cuid())
  modelId   String
  name      String
  slug      String
  color     String?
  createdAt DateTime         @default(now())
  threads   ForumThreadTag[]

  @@unique([modelId, slug])
  @@index([modelId])
  @@index([slug])
}

model ForumThreadTag {
  id        String   @id @default(cuid())
  threadId  String
  tagId     String
  createdAt DateTime @default(now())
  tag       ForumTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([threadId, tagId])
  @@index([threadId])
  @@index([tagId])
}

model ForumStats {
  id           String   @id @default(cuid())
  modelId      String
  totalThreads Int      @default(0)
  totalPosts   Int      @default(0)
  totalUsers   Int      @default(0)
  activeUsers  Int      @default(0)
  date         DateTime @default(now())

  @@unique([modelId, date])
  @@index([modelId])
  @@index([date])
}

model ForumAnalytics {
  id      String   @id @default(cuid())
  modelId String
  metric  String
  value   Float
  date    DateTime @default(now())

  @@index([modelId])
  @@index([metric])
  @@index([date])
}

model UserActivityHistory {
  id           String           @id @default(cuid())
  actorId      String
  targetUserId String
  actionType   UserActivityType
  oldRole      Role?
  newRole      Role
  reason       String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime         @default(now())
  actor        User             @relation("UserActivityActor", fields: [actorId], references: [id], onDelete: Cascade)
  targetUser   User             @relation("UserActivityTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@index([actorId])
  @@index([targetUserId])
  @@index([createdAt])
  @@index([actionType])
  @@index([oldRole])
  @@index([newRole])
}

model ChatbotConversation {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
  SWD
  POD
}

enum VoiceStatus {
  NA
  ACTIVE
  UPLOADING
  PITCHED
  DECLINED
}

enum AccountType {
  GMAIL
  ELEVENLABS
}

enum VoiceModelCategory {
  PROFESSIONAL
  CASUAL
  EXPERIMENTAL
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskActivityType {
  CREATED
  UPDATED
  STATUS_CHANGED
  PRIORITY_CHANGED
  ASSIGNED
  UNASSIGNED
  DUE_DATE_CHANGED
  ATTACHMENT_ADDED
  ATTACHMENT_REMOVED
  COMMENT_ADDED
  DELETED
}

enum SubmissionPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  TASK_CREATED
  COMPLETED
  CANCELLED
}

enum SubmissionType {
  OTP
  PTR
}

enum ContentStyle {
  NORMAL
  GAME
  POLL
  LIVESTREAM
  BUNDLE
}

enum WorkflowStatus {
  PENDING
  PROCESSING
  TASK_CREATED
  COMPLETED
  CANCELLED
}

enum PodMemberRole {
  LEADER
  MEMBER
  ADMIN
}

enum AttachmentType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}

enum ForumCategoryKey {
  GENERAL
  QA
  BUGS
  SHOWCASE
  RELEASES
}

enum ModerationAction {
  PIN
  UNPIN
  LOCK
  UNLOCK
  SOLVE
  UNSOLVE
  DELETE
  RESTORE
  MOVE_CATEGORY
  BAN_USER
  UNBAN_USER
}

enum ModerationTarget {
  THREAD
  POST
  USER
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_STATUS_CHANGED
  TASK_COMMENT_ADDED
  TASK_DUE_DATE_APPROACHING
  POD_TEAM_ADDED
  POD_TEAM_CLIENT_ASSIGNED
  POD_TEAM_MEMBER_JOINED
  CONTENT_SUBMISSION_STATUS_CHANGED
  CLIENT_SHEET_LINK_ADDED
  SYSTEM_NOTIFICATION
  TASK_MENTION
}

enum ForumVoteType {
  UPVOTE
  DOWNVOTE
}

enum UserActivityType {
  ROLE_CHANGED
  ACCOUNT_CREATED
  ACCOUNT_SUSPENDED
  ACCOUNT_REACTIVATED
  ACCOUNT_DELETED
  PASSWORD_RESET
  EMAIL_VERIFIED
}
