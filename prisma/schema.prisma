generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                    @id @default(cuid())
  email                String                    @unique
  emailVerified        DateTime?
  name                 String?
  image                String?
  role                 Role                      @default(GUEST)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  password             String?
  lastAccessedAt       DateTime?                 @default(now())
  username             String?                   @unique
  accounts             Account[]
  ContentSubmission    ContentSubmission[]
  pageViews            PageView[]
  createdPodTeams      PodTeam[]                 @relation("PodTeamCreator")
  podClientAssignments PodTeamClientAssignment[] @relation("PodClientAssignedBy")
  podTeamMemberships   PodTeamMember[]           @relation("PodTeamMemberUser")
  sessions             Session[]
  createdTasks         Task[]                    @relation("TaskCreator")
  taskActivities       TaskActivityHistory[]     @relation("TaskActivityUser")
  taskComments         TaskComment[]             @relation("TaskCommentUser")
  verificationTokens   VerificationToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model HubstaffConfig {
  id           String    @id @default(cuid())
  refreshToken String
  accessToken  String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([id])
}

model PageView {
  id              String   @id @default(cuid())
  sessionId       String
  userId          String?
  ipHash          String
  userAgent       String?
  path            String
  referrer        String?
  timestamp       DateTime @default(now())
  sessionDuration Int?
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
  @@index([path])
}

model Analytics {
  id                 String   @id @default(cuid())
  date               DateTime @unique
  uniqueVisitors     Int      @default(0)
  totalPageViews     Int      @default(0)
  authenticatedViews Int      @default(0)
  anonymousViews     Int      @default(0)
  createdAt          DateTime @default(now())

  @@index([date])
}

model VoiceGenAccount {
  id          String      @id @default(cuid())
  clientName  String
  email       String?
  password    String?
  voiceStatus VoiceStatus @default(NA)
  accountType AccountType @default(ELEVENLABS)
  dataFolder  String?
  feedback    String?
  rating      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([clientName])
  @@index([voiceStatus])
  @@index([accountType])
}

model VoiceModel {
  id          String             @id @default(cuid())
  accountKey  String             @unique
  accountName String
  voiceName   String
  voiceId     String             @unique
  apiKey      String
  description String?            @default("Backup account for high-volume usage")
  category    VoiceModelCategory @default(PROFESSIONAL)
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([accountKey])
  @@index([voiceId])
  @@index([category])
  @@index([isActive])
  @@index([createdAt])
}

model Task {
  id                  String                @id @default(cuid())
  title               String
  description         String?
  priority            TaskPriority          @default(MEDIUM)
  dueDate             DateTime?
  teamId              String
  teamName            String
  assignedTo          String?
  createdById         String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  updatedBy           String?
  attachments         Json?
  assignedToTeam      Boolean               @default(false)
  contentSubmissionId String?               @unique
  status              String                @default("NOT_STARTED")
  ContentSubmission   ContentSubmission?    @relation(fields: [contentSubmissionId], references: [id])
  createdBy           User                  @relation("TaskCreator", fields: [createdById], references: [id])
  activityHistory     TaskActivityHistory[]
  comments            TaskComment[]

  @@index([teamId])
  @@index([createdById])
  @@index([status])
  @@index([assignedToTeam])
  @@index([contentSubmissionId])
}

model TaskActivityHistory {
  id          String           @id @default(cuid())
  taskId      String
  userId      String
  actionType  TaskActivityType
  fieldName   String?
  oldValue    String?
  newValue    String?
  description String?
  createdAt   DateTime         @default(now())
  task        Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User             @relation("TaskActivityUser", fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
  @@index([actionType])
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation("TaskCommentUser", fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
}

model ClientModel {
  id                    String                    @id @default(cuid())
  clientName            String                    @unique
  status                String
  percentTaken          String?
  guaranteed            String?
  launchDate            String?
  referrer              String?
  name                  String?
  profilePicture        String?
  personalityType       String?
  commonTerms           String?
  commonEmojis          String?
  restrictedTermsEmojis String?
  notes                 String?
  generalNotes          String?
  mainInstagram         String?
  mainTwitter           String?
  mainTiktok            String?
  profileLink           String?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  row_id                String?
  sheetLink             String?
  spreadsheetName       String?
  contentDetails        ContentDetails[]
  podTeamAssignments    PodTeamClientAssignment[]

  @@index([clientName])
  @@index([status])
}

model ContentDetails {
  id                         String      @id @default(cuid())
  twitterNudity              String?
  openToLivestreams          String?
  onlyFansWallLimitations    String?
  flyerCensorshipLimitations String?
  boobContent                String?
  pussyContent               String?
  soloSquirtContent          String?
  soloFingerContent          String?
  soloDildoContent           String?
  soloVibratorContent        String?
  joiContent                 String?
  bgContent                  String?
  bjHandjobContent           String?
  bggContent                 String?
  bbgContent                 String?
  orgyContent                String?
  ggContent                  String?
  analContent                String?
  livestreamContent          String?
  customVideoPricing         String?
  customCallPricing          String?
  bundleContent5_10          String?
  bundleContent10_15         String?
  bundleContent15_20         String?
  bundleContent20_25         String?
  bundleContent25_30         String?
  bundleContent30Plus        String?
  contentOptionsForGames     String?
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  clientModelName            String
  clientModel                ClientModel @relation(fields: [clientModelName], references: [clientName], onDelete: Cascade)
}

model ClientModelDetails {
  id                    String   @id @default(cuid())
  full_name             String?
  age                   String?
  birthday              String?
  height                String?
  weight                String?
  clothing_size         String?
  ethnicity             String?
  birthplace            String?
  current_city          String?
  timezone              String?
  background            String?
  favorite_colors       String?
  interests             String?
  personality           String?
  amazon_wishlist       String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  clothing_items        String?
  content_offered       String?
  custom_min_price      String?
  favorite_emojis       String?
  keywords              String?
  limitations           String?
  oftv_channel_interest String?
  tone_language         String?
  video_call_min_price  String?
  client_name           String?
  mm_restrictions       String?
  verbiage_restrictions String?
  wall_restrictions     String?
}

model PodTeam {
  id              String                    @id @default(cuid())
  createdAt       DateTime                  @default(now())
  createdById     String?
  description     String?
  isActive        Boolean?                  @default(true)
  name            String?
  updatedAt       DateTime?                 @updatedAt
  createdBy       User?                     @relation("PodTeamCreator", fields: [createdById], references: [id])
  assignedClients PodTeamClientAssignment[]
  members         PodTeamMember[]

  @@index([createdById])
  @@index([isActive])
}

model PodTeamMember {
  id        String        @id @default(cuid())
  podTeamId String
  userId    String
  role      PodMemberRole @default(MEMBER)
  joinedAt  DateTime      @default(now())
  podTeam   PodTeam       @relation(fields: [podTeamId], references: [id], onDelete: Cascade)
  user      User          @relation("PodTeamMemberUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([podTeamId, userId])
  @@index([podTeamId])
  @@index([userId])
}

model PodTeamClientAssignment {
  id            String      @id @default(cuid())
  podTeamId     String
  clientModelId String
  assignedAt    DateTime    @default(now())
  assignedById  String
  isActive      Boolean     @default(true)
  notes         String?
  assignedBy    User        @relation("PodClientAssignedBy", fields: [assignedById], references: [id])
  clientModel   ClientModel @relation(fields: [clientModelId], references: [id], onDelete: Cascade)
  podTeam       PodTeam     @relation(fields: [podTeamId], references: [id], onDelete: Cascade)

  @@unique([podTeamId, clientModelId])
  @@index([podTeamId])
  @@index([clientModelId])
  @@index([assignedById])
}

model BoardColumn {
  id        String   @id
  teamId    String
  label     String
  status    String
  position  Int
  color     String   @default("#6B7280")
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@unique([teamId, position])
  @@unique([teamId, status])
  @@index([position])
  @@index([teamId])
}

model ContentSubmission {
  id                    String             @id
  submissionType        SubmissionType
  modelName             String
  priority              SubmissionPriority
  driveLink             String
  contentDescription    String
  screenshotAttachments Json?
  status                SubmissionStatus   @default(PENDING)
  createdById           String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime
  processedAt           DateTime?
  notes                 String?
  minimumPrice          String?
  releaseDate           String?
  releaseTime           String?
  User                  User               @relation(fields: [createdById], references: [id])
  Task                  Task?

  @@index([createdAt])
  @@index([createdById])
  @@index([modelName])
  @@index([priority])
  @@index([status])
  @@index([submissionType])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
  SWD
  POD
}

enum VoiceStatus {
  NA
  ACTIVE
  UPLOADING
  PITCHED
  DECLINED
}

enum AccountType {
  GMAIL
  ELEVENLABS
}

enum VoiceModelCategory {
  PROFESSIONAL
  CASUAL
  EXPERIMENTAL
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskActivityType {
  CREATED
  UPDATED
  STATUS_CHANGED
  PRIORITY_CHANGED
  ASSIGNED
  UNASSIGNED
  DUE_DATE_CHANGED
  ATTACHMENT_ADDED
  ATTACHMENT_REMOVED
  COMMENT_ADDED
  DELETED
}

enum SubmissionPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  TASK_CREATED
  COMPLETED
  CANCELLED
}

enum SubmissionType {
  OTP
  PTR
}

enum PodMemberRole {
  LEADER
  MEMBER
  ADMIN
}
