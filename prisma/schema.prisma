generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  emailVerified      DateTime?
  name               String?
  image              String?
  role               Role                @default(GUEST)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  password           String?
  lastAccessedAt     DateTime?           @default(now())
  accounts           Account[]
  pageViews          PageView[]
  sessions           Session[]
  verificationTokens VerificationToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model HubstaffConfig {
  id           String    @id @default(cuid())
  refreshToken String
  accessToken  String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([id])
}

model PageView {
  id              String   @id @default(cuid())
  sessionId       String
  userId          String?
  ipHash          String
  userAgent       String?
  path            String
  referrer        String?
  timestamp       DateTime @default(now())
  sessionDuration Int?
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
  @@index([path])
}

model Analytics {
  id                 String   @id @default(cuid())
  date               DateTime @unique
  uniqueVisitors     Int      @default(0)
  totalPageViews     Int      @default(0)
  authenticatedViews Int      @default(0)
  anonymousViews     Int      @default(0)
  createdAt          DateTime @default(now())

  @@index([date])
}

enum Role {
  USER
  ADMIN
  MODERATOR
  GUEST
  SWD
}
